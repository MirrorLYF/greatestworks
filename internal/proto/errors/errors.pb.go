// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v4.25.1
// source: proto/errors.proto

package errors

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 错误码枚举 - 通用错误 (1000-1999)
type CommonErrorCode int32

const (
	CommonErrorCode_COMMON_ERROR_CODE_UNSPECIFIED CommonErrorCode = 0
	// 成功状态
	CommonErrorCode_ERR_SUCCESS CommonErrorCode = 0 // 成功
	// 通用错误
	CommonErrorCode_ERR_UNKNOWN           CommonErrorCode = 1000 // 未知错误
	CommonErrorCode_ERR_INVALID_MESSAGE   CommonErrorCode = 1001 // 无效消息
	CommonErrorCode_ERR_AUTH_FAILED       CommonErrorCode = 1002 // 认证失败
	CommonErrorCode_ERR_PLAYER_NOT_FOUND  CommonErrorCode = 1003 // 玩家未找到
	CommonErrorCode_ERR_BATTLE_NOT_FOUND  CommonErrorCode = 1004 // 战斗未找到
	CommonErrorCode_ERR_UNKNOWN_MESSAGE   CommonErrorCode = 1005 // 未知消息类型
	CommonErrorCode_ERR_SERVER_BUSY       CommonErrorCode = 1006 // 服务器繁忙
	CommonErrorCode_ERR_INVALID_PLAYER    CommonErrorCode = 1007 // 无效玩家
	CommonErrorCode_ERR_PERMISSION_DENIED CommonErrorCode = 1008 // 权限不足
	CommonErrorCode_ERR_RATE_LIMITED      CommonErrorCode = 1009 // 请求过于频繁
	CommonErrorCode_ERR_MAINTENANCE       CommonErrorCode = 1010 // 服务器维护
	CommonErrorCode_ERR_INVALID_REQUEST   CommonErrorCode = 1011 // 无效请求
	CommonErrorCode_ERR_TIMEOUT           CommonErrorCode = 1012 // 请求超时
	CommonErrorCode_ERR_CONNECTION_LOST   CommonErrorCode = 1013 // 连接丢失
	CommonErrorCode_ERR_INVALID_TOKEN     CommonErrorCode = 1014 // 无效令牌
	CommonErrorCode_ERR_SESSION_EXPIRED   CommonErrorCode = 1015 // 会话过期
)

// Enum value maps for CommonErrorCode.
var (
	CommonErrorCode_name = map[int32]string{
		0: "COMMON_ERROR_CODE_UNSPECIFIED",
		// Duplicate value: 0: "ERR_SUCCESS",
		1000: "ERR_UNKNOWN",
		1001: "ERR_INVALID_MESSAGE",
		1002: "ERR_AUTH_FAILED",
		1003: "ERR_PLAYER_NOT_FOUND",
		1004: "ERR_BATTLE_NOT_FOUND",
		1005: "ERR_UNKNOWN_MESSAGE",
		1006: "ERR_SERVER_BUSY",
		1007: "ERR_INVALID_PLAYER",
		1008: "ERR_PERMISSION_DENIED",
		1009: "ERR_RATE_LIMITED",
		1010: "ERR_MAINTENANCE",
		1011: "ERR_INVALID_REQUEST",
		1012: "ERR_TIMEOUT",
		1013: "ERR_CONNECTION_LOST",
		1014: "ERR_INVALID_TOKEN",
		1015: "ERR_SESSION_EXPIRED",
	}
	CommonErrorCode_value = map[string]int32{
		"COMMON_ERROR_CODE_UNSPECIFIED": 0,
		"ERR_SUCCESS":                   0,
		"ERR_UNKNOWN":                   1000,
		"ERR_INVALID_MESSAGE":           1001,
		"ERR_AUTH_FAILED":               1002,
		"ERR_PLAYER_NOT_FOUND":          1003,
		"ERR_BATTLE_NOT_FOUND":          1004,
		"ERR_UNKNOWN_MESSAGE":           1005,
		"ERR_SERVER_BUSY":               1006,
		"ERR_INVALID_PLAYER":            1007,
		"ERR_PERMISSION_DENIED":         1008,
		"ERR_RATE_LIMITED":              1009,
		"ERR_MAINTENANCE":               1010,
		"ERR_INVALID_REQUEST":           1011,
		"ERR_TIMEOUT":                   1012,
		"ERR_CONNECTION_LOST":           1013,
		"ERR_INVALID_TOKEN":             1014,
		"ERR_SESSION_EXPIRED":           1015,
	}
)

func (x CommonErrorCode) Enum() *CommonErrorCode {
	p := new(CommonErrorCode)
	*p = x
	return p
}

func (x CommonErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommonErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[0].Descriptor()
}

func (CommonErrorCode) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[0]
}

func (x CommonErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommonErrorCode.Descriptor instead.
func (CommonErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{0}
}

// 错误码枚举 - 战斗相关错误 (2000-2999)
type BattleErrorCode int32

const (
	BattleErrorCode_BATTLE_ERROR_CODE_UNSPECIFIED BattleErrorCode = 0
	// 战斗基础错误
	BattleErrorCode_ERR_INVALID_CREATOR_ID     BattleErrorCode = 2001 // 无效创建者ID
	BattleErrorCode_ERR_INVALID_BATTLE_TYPE    BattleErrorCode = 2002 // 无效战斗类型
	BattleErrorCode_ERR_INVALID_BATTLE_ID      BattleErrorCode = 2003 // 无效战斗ID
	BattleErrorCode_ERR_INVALID_PLAYER_ID      BattleErrorCode = 2004 // 无效玩家ID
	BattleErrorCode_ERR_INVALID_TARGET_ID      BattleErrorCode = 2005 // 无效目标ID
	BattleErrorCode_ERR_INVALID_SKILL_ID       BattleErrorCode = 2006 // 无效技能ID
	BattleErrorCode_ERR_INVALID_TEAM           BattleErrorCode = 2007 // 无效队伍
	BattleErrorCode_ERR_BATTLE_ALREADY_STARTED BattleErrorCode = 2008 // 战斗已开始
	BattleErrorCode_ERR_BATTLE_NOT_STARTED     BattleErrorCode = 2009 // 战斗未开始
	BattleErrorCode_ERR_PLAYER_NOT_IN_BATTLE   BattleErrorCode = 2010 // 玩家不在战斗中
	BattleErrorCode_ERR_INSUFFICIENT_MANA      BattleErrorCode = 2011 // MP不足
	BattleErrorCode_ERR_SKILL_ON_COOLDOWN      BattleErrorCode = 2012 // 技能冷却中
	BattleErrorCode_ERR_INVALID_ACTION         BattleErrorCode = 2013 // 无效行动
	BattleErrorCode_ERR_BATTLE_FULL            BattleErrorCode = 2014 // 战斗已满
	BattleErrorCode_ERR_BATTLE_ENDED           BattleErrorCode = 2015 // 战斗已结束
	BattleErrorCode_ERR_NOT_YOUR_TURN          BattleErrorCode = 2016 // 不是你的回合
	BattleErrorCode_ERR_BATTLE_CANCELLED       BattleErrorCode = 2017 // 战斗已取消
	BattleErrorCode_ERR_INVALID_BATTLE_STATE   BattleErrorCode = 2018 // 无效战斗状态
	BattleErrorCode_ERR_BATTLE_TIMEOUT         BattleErrorCode = 2019 // 战斗超时
)

// Enum value maps for BattleErrorCode.
var (
	BattleErrorCode_name = map[int32]string{
		0:    "BATTLE_ERROR_CODE_UNSPECIFIED",
		2001: "ERR_INVALID_CREATOR_ID",
		2002: "ERR_INVALID_BATTLE_TYPE",
		2003: "ERR_INVALID_BATTLE_ID",
		2004: "ERR_INVALID_PLAYER_ID",
		2005: "ERR_INVALID_TARGET_ID",
		2006: "ERR_INVALID_SKILL_ID",
		2007: "ERR_INVALID_TEAM",
		2008: "ERR_BATTLE_ALREADY_STARTED",
		2009: "ERR_BATTLE_NOT_STARTED",
		2010: "ERR_PLAYER_NOT_IN_BATTLE",
		2011: "ERR_INSUFFICIENT_MANA",
		2012: "ERR_SKILL_ON_COOLDOWN",
		2013: "ERR_INVALID_ACTION",
		2014: "ERR_BATTLE_FULL",
		2015: "ERR_BATTLE_ENDED",
		2016: "ERR_NOT_YOUR_TURN",
		2017: "ERR_BATTLE_CANCELLED",
		2018: "ERR_INVALID_BATTLE_STATE",
		2019: "ERR_BATTLE_TIMEOUT",
	}
	BattleErrorCode_value = map[string]int32{
		"BATTLE_ERROR_CODE_UNSPECIFIED": 0,
		"ERR_INVALID_CREATOR_ID":        2001,
		"ERR_INVALID_BATTLE_TYPE":       2002,
		"ERR_INVALID_BATTLE_ID":         2003,
		"ERR_INVALID_PLAYER_ID":         2004,
		"ERR_INVALID_TARGET_ID":         2005,
		"ERR_INVALID_SKILL_ID":          2006,
		"ERR_INVALID_TEAM":              2007,
		"ERR_BATTLE_ALREADY_STARTED":    2008,
		"ERR_BATTLE_NOT_STARTED":        2009,
		"ERR_PLAYER_NOT_IN_BATTLE":      2010,
		"ERR_INSUFFICIENT_MANA":         2011,
		"ERR_SKILL_ON_COOLDOWN":         2012,
		"ERR_INVALID_ACTION":            2013,
		"ERR_BATTLE_FULL":               2014,
		"ERR_BATTLE_ENDED":              2015,
		"ERR_NOT_YOUR_TURN":             2016,
		"ERR_BATTLE_CANCELLED":          2017,
		"ERR_INVALID_BATTLE_STATE":      2018,
		"ERR_BATTLE_TIMEOUT":            2019,
	}
)

func (x BattleErrorCode) Enum() *BattleErrorCode {
	p := new(BattleErrorCode)
	*p = x
	return p
}

func (x BattleErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattleErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[1].Descriptor()
}

func (BattleErrorCode) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[1]
}

func (x BattleErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BattleErrorCode.Descriptor instead.
func (BattleErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{1}
}

// 错误码枚举 - 宠物相关错误 (3000-3999)
type PetErrorCode int32

const (
	PetErrorCode_PET_ERROR_CODE_UNSPECIFIED  PetErrorCode = 0
	PetErrorCode_ERR_PET_NOT_FOUND           PetErrorCode = 3001 // 宠物未找到
	PetErrorCode_ERR_PET_ALREADY_ACTIVE      PetErrorCode = 3002 // 宠物已激活
	PetErrorCode_ERR_PET_NOT_ACTIVE          PetErrorCode = 3003 // 宠物未激活
	PetErrorCode_ERR_PET_LEVEL_TOO_LOW       PetErrorCode = 3004 // 宠物等级过低
	PetErrorCode_ERR_PET_EVOLUTION_FAIL      PetErrorCode = 3005 // 宠物进化失败
	PetErrorCode_ERR_PET_INSUFFICIENT_EXP    PetErrorCode = 3006 // 宠物经验不足
	PetErrorCode_ERR_PET_ALREADY_EVOLVED     PetErrorCode = 3007 // 宠物已进化
	PetErrorCode_ERR_PET_TRAINING_FAILED     PetErrorCode = 3008 // 宠物训练失败
	PetErrorCode_ERR_PET_FEEDING_FAILED      PetErrorCode = 3009 // 宠物喂养失败
	PetErrorCode_ERR_PET_SKILL_NOT_LEARNED   PetErrorCode = 3010 // 宠物技能未学习
	PetErrorCode_ERR_PET_INSUFFICIENT_ENERGY PetErrorCode = 3011 // 宠物能量不足
	PetErrorCode_ERR_PET_SICK                PetErrorCode = 3012 // 宠物生病
	PetErrorCode_ERR_PET_DEAD                PetErrorCode = 3013 // 宠物死亡
	PetErrorCode_ERR_PET_BOND_FAILED         PetErrorCode = 3014 // 宠物羁绊失败
)

// Enum value maps for PetErrorCode.
var (
	PetErrorCode_name = map[int32]string{
		0:    "PET_ERROR_CODE_UNSPECIFIED",
		3001: "ERR_PET_NOT_FOUND",
		3002: "ERR_PET_ALREADY_ACTIVE",
		3003: "ERR_PET_NOT_ACTIVE",
		3004: "ERR_PET_LEVEL_TOO_LOW",
		3005: "ERR_PET_EVOLUTION_FAIL",
		3006: "ERR_PET_INSUFFICIENT_EXP",
		3007: "ERR_PET_ALREADY_EVOLVED",
		3008: "ERR_PET_TRAINING_FAILED",
		3009: "ERR_PET_FEEDING_FAILED",
		3010: "ERR_PET_SKILL_NOT_LEARNED",
		3011: "ERR_PET_INSUFFICIENT_ENERGY",
		3012: "ERR_PET_SICK",
		3013: "ERR_PET_DEAD",
		3014: "ERR_PET_BOND_FAILED",
	}
	PetErrorCode_value = map[string]int32{
		"PET_ERROR_CODE_UNSPECIFIED":  0,
		"ERR_PET_NOT_FOUND":           3001,
		"ERR_PET_ALREADY_ACTIVE":      3002,
		"ERR_PET_NOT_ACTIVE":          3003,
		"ERR_PET_LEVEL_TOO_LOW":       3004,
		"ERR_PET_EVOLUTION_FAIL":      3005,
		"ERR_PET_INSUFFICIENT_EXP":    3006,
		"ERR_PET_ALREADY_EVOLVED":     3007,
		"ERR_PET_TRAINING_FAILED":     3008,
		"ERR_PET_FEEDING_FAILED":      3009,
		"ERR_PET_SKILL_NOT_LEARNED":   3010,
		"ERR_PET_INSUFFICIENT_ENERGY": 3011,
		"ERR_PET_SICK":                3012,
		"ERR_PET_DEAD":                3013,
		"ERR_PET_BOND_FAILED":         3014,
	}
)

func (x PetErrorCode) Enum() *PetErrorCode {
	p := new(PetErrorCode)
	*p = x
	return p
}

func (x PetErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PetErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[2].Descriptor()
}

func (PetErrorCode) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[2]
}

func (x PetErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PetErrorCode.Descriptor instead.
func (PetErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{2}
}

// 错误码枚举 - 物品相关错误 (4000-4999)
type ItemErrorCode int32

const (
	ItemErrorCode_ITEM_ERROR_CODE_UNSPECIFIED ItemErrorCode = 0
	ItemErrorCode_ERR_ITEM_NOT_FOUND          ItemErrorCode = 4001 // 物品未找到
	ItemErrorCode_ERR_ITEM_NOT_USABLE         ItemErrorCode = 4002 // 物品不可使用
	ItemErrorCode_ERR_INVENTORY_FULL          ItemErrorCode = 4003 // 背包已满
	ItemErrorCode_ERR_INSUFFICIENT_ITEM       ItemErrorCode = 4004 // 物品数量不足
	ItemErrorCode_ERR_ITEM_EQUIP_FAILED       ItemErrorCode = 4005 // 装备失败
	ItemErrorCode_ERR_ITEM_UNEQUIP_FAILED     ItemErrorCode = 4006 // 卸装失败
	ItemErrorCode_ERR_ITEM_CRAFT_FAILED       ItemErrorCode = 4007 // 制作失败
	ItemErrorCode_ERR_ITEM_ENHANCE_FAILED     ItemErrorCode = 4008 // 强化失败
	ItemErrorCode_ERR_ITEM_TRADE_FAILED       ItemErrorCode = 4009 // 交易失败
	ItemErrorCode_ERR_ITEM_DROP_FAILED        ItemErrorCode = 4010 // 丢弃失败
	ItemErrorCode_ERR_ITEM_PICKUP_FAILED      ItemErrorCode = 4011 // 拾取失败
	ItemErrorCode_ERR_ITEM_STACK_FULL         ItemErrorCode = 4012 // 物品堆叠已满
	ItemErrorCode_ERR_ITEM_NOT_TRADEABLE      ItemErrorCode = 4013 // 物品不可交易
	ItemErrorCode_ERR_ITEM_BOUND              ItemErrorCode = 4014 // 物品已绑定
	ItemErrorCode_ERR_ITEM_LEVEL_TOO_LOW      ItemErrorCode = 4015 // 物品等级过低
)

// Enum value maps for ItemErrorCode.
var (
	ItemErrorCode_name = map[int32]string{
		0:    "ITEM_ERROR_CODE_UNSPECIFIED",
		4001: "ERR_ITEM_NOT_FOUND",
		4002: "ERR_ITEM_NOT_USABLE",
		4003: "ERR_INVENTORY_FULL",
		4004: "ERR_INSUFFICIENT_ITEM",
		4005: "ERR_ITEM_EQUIP_FAILED",
		4006: "ERR_ITEM_UNEQUIP_FAILED",
		4007: "ERR_ITEM_CRAFT_FAILED",
		4008: "ERR_ITEM_ENHANCE_FAILED",
		4009: "ERR_ITEM_TRADE_FAILED",
		4010: "ERR_ITEM_DROP_FAILED",
		4011: "ERR_ITEM_PICKUP_FAILED",
		4012: "ERR_ITEM_STACK_FULL",
		4013: "ERR_ITEM_NOT_TRADEABLE",
		4014: "ERR_ITEM_BOUND",
		4015: "ERR_ITEM_LEVEL_TOO_LOW",
	}
	ItemErrorCode_value = map[string]int32{
		"ITEM_ERROR_CODE_UNSPECIFIED": 0,
		"ERR_ITEM_NOT_FOUND":          4001,
		"ERR_ITEM_NOT_USABLE":         4002,
		"ERR_INVENTORY_FULL":          4003,
		"ERR_INSUFFICIENT_ITEM":       4004,
		"ERR_ITEM_EQUIP_FAILED":       4005,
		"ERR_ITEM_UNEQUIP_FAILED":     4006,
		"ERR_ITEM_CRAFT_FAILED":       4007,
		"ERR_ITEM_ENHANCE_FAILED":     4008,
		"ERR_ITEM_TRADE_FAILED":       4009,
		"ERR_ITEM_DROP_FAILED":        4010,
		"ERR_ITEM_PICKUP_FAILED":      4011,
		"ERR_ITEM_STACK_FULL":         4012,
		"ERR_ITEM_NOT_TRADEABLE":      4013,
		"ERR_ITEM_BOUND":              4014,
		"ERR_ITEM_LEVEL_TOO_LOW":      4015,
	}
)

func (x ItemErrorCode) Enum() *ItemErrorCode {
	p := new(ItemErrorCode)
	*p = x
	return p
}

func (x ItemErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[3].Descriptor()
}

func (ItemErrorCode) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[3]
}

func (x ItemErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemErrorCode.Descriptor instead.
func (ItemErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{3}
}

// 错误码枚举 - 建筑相关错误 (5000-5999)
type BuildingErrorCode int32

const (
	BuildingErrorCode_BUILDING_ERROR_CODE_UNSPECIFIED     BuildingErrorCode = 0
	BuildingErrorCode_ERR_BUILDING_NOT_FOUND              BuildingErrorCode = 5001 // 建筑未找到
	BuildingErrorCode_ERR_BUILDING_ALREADY_EXISTS         BuildingErrorCode = 5002 // 建筑已存在
	BuildingErrorCode_ERR_BUILDING_INSUFFICIENT_RESOURCES BuildingErrorCode = 5003 // 资源不足
	BuildingErrorCode_ERR_BUILDING_UPGRADE_FAILED         BuildingErrorCode = 5004 // 升级失败
	BuildingErrorCode_ERR_BUILDING_DESTROY_FAILED         BuildingErrorCode = 5005 // 摧毁失败
	BuildingErrorCode_ERR_BUILDING_PRODUCE_FAILED         BuildingErrorCode = 5006 // 生产失败
	BuildingErrorCode_ERR_BUILDING_COLLECT_FAILED         BuildingErrorCode = 5007 // 收集失败
	BuildingErrorCode_ERR_BUILDING_REPAIR_FAILED          BuildingErrorCode = 5008 // 修复失败
	BuildingErrorCode_ERR_BUILDING_LEVEL_TOO_LOW          BuildingErrorCode = 5009 // 建筑等级过低
	BuildingErrorCode_ERR_BUILDING_LEVEL_TOO_HIGH         BuildingErrorCode = 5010 // 建筑等级过高
	BuildingErrorCode_ERR_BUILDING_NOT_READY              BuildingErrorCode = 5011 // 建筑未就绪
	BuildingErrorCode_ERR_BUILDING_UNDER_CONSTRUCTION     BuildingErrorCode = 5012 // 建筑建造中
)

// Enum value maps for BuildingErrorCode.
var (
	BuildingErrorCode_name = map[int32]string{
		0:    "BUILDING_ERROR_CODE_UNSPECIFIED",
		5001: "ERR_BUILDING_NOT_FOUND",
		5002: "ERR_BUILDING_ALREADY_EXISTS",
		5003: "ERR_BUILDING_INSUFFICIENT_RESOURCES",
		5004: "ERR_BUILDING_UPGRADE_FAILED",
		5005: "ERR_BUILDING_DESTROY_FAILED",
		5006: "ERR_BUILDING_PRODUCE_FAILED",
		5007: "ERR_BUILDING_COLLECT_FAILED",
		5008: "ERR_BUILDING_REPAIR_FAILED",
		5009: "ERR_BUILDING_LEVEL_TOO_LOW",
		5010: "ERR_BUILDING_LEVEL_TOO_HIGH",
		5011: "ERR_BUILDING_NOT_READY",
		5012: "ERR_BUILDING_UNDER_CONSTRUCTION",
	}
	BuildingErrorCode_value = map[string]int32{
		"BUILDING_ERROR_CODE_UNSPECIFIED":     0,
		"ERR_BUILDING_NOT_FOUND":              5001,
		"ERR_BUILDING_ALREADY_EXISTS":         5002,
		"ERR_BUILDING_INSUFFICIENT_RESOURCES": 5003,
		"ERR_BUILDING_UPGRADE_FAILED":         5004,
		"ERR_BUILDING_DESTROY_FAILED":         5005,
		"ERR_BUILDING_PRODUCE_FAILED":         5006,
		"ERR_BUILDING_COLLECT_FAILED":         5007,
		"ERR_BUILDING_REPAIR_FAILED":          5008,
		"ERR_BUILDING_LEVEL_TOO_LOW":          5009,
		"ERR_BUILDING_LEVEL_TOO_HIGH":         5010,
		"ERR_BUILDING_NOT_READY":              5011,
		"ERR_BUILDING_UNDER_CONSTRUCTION":     5012,
	}
)

func (x BuildingErrorCode) Enum() *BuildingErrorCode {
	p := new(BuildingErrorCode)
	*p = x
	return p
}

func (x BuildingErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildingErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[4].Descriptor()
}

func (BuildingErrorCode) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[4]
}

func (x BuildingErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildingErrorCode.Descriptor instead.
func (BuildingErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{4}
}

// 错误码枚举 - 社交相关错误 (6000-6999)
type SocialErrorCode int32

const (
	SocialErrorCode_SOCIAL_ERROR_CODE_UNSPECIFIED SocialErrorCode = 0
	SocialErrorCode_ERR_FRIEND_NOT_FOUND          SocialErrorCode = 6001 // 好友未找到
	SocialErrorCode_ERR_FRIEND_ALREADY_EXISTS     SocialErrorCode = 6002 // 好友已存在
	SocialErrorCode_ERR_FRIEND_REQUEST_FAILED     SocialErrorCode = 6003 // 好友请求失败
	SocialErrorCode_ERR_FRIEND_ACCEPT_FAILED      SocialErrorCode = 6004 // 接受好友失败
	SocialErrorCode_ERR_FRIEND_REJECT_FAILED      SocialErrorCode = 6005 // 拒绝好友失败
	SocialErrorCode_ERR_FRIEND_REMOVE_FAILED      SocialErrorCode = 6006 // 删除好友失败
	SocialErrorCode_ERR_GUILD_NOT_FOUND           SocialErrorCode = 6007 // 公会未找到
	SocialErrorCode_ERR_GUILD_ALREADY_EXISTS      SocialErrorCode = 6008 // 公会已存在
	SocialErrorCode_ERR_GUILD_CREATE_FAILED       SocialErrorCode = 6009 // 创建公会失败
	SocialErrorCode_ERR_GUILD_JOIN_FAILED         SocialErrorCode = 6010 // 加入公会失败
	SocialErrorCode_ERR_GUILD_LEAVE_FAILED        SocialErrorCode = 6011 // 离开公会失败
	SocialErrorCode_ERR_GUILD_PERMISSION_DENIED   SocialErrorCode = 6012 // 公会权限不足
	SocialErrorCode_ERR_TEAM_NOT_FOUND            SocialErrorCode = 6013 // 队伍未找到
	SocialErrorCode_ERR_TEAM_ALREADY_EXISTS       SocialErrorCode = 6014 // 队伍已存在
	SocialErrorCode_ERR_TEAM_CREATE_FAILED        SocialErrorCode = 6015 // 创建队伍失败
	SocialErrorCode_ERR_TEAM_JOIN_FAILED          SocialErrorCode = 6016 // 加入队伍失败
	SocialErrorCode_ERR_TEAM_LEAVE_FAILED         SocialErrorCode = 6017 // 离开队伍失败
	SocialErrorCode_ERR_CHAT_MESSAGE_FAILED       SocialErrorCode = 6018 // 聊天消息失败
	SocialErrorCode_ERR_CHAT_CHANNEL_NOT_FOUND    SocialErrorCode = 6019 // 聊天频道未找到
	SocialErrorCode_ERR_CHAT_PERMISSION_DENIED    SocialErrorCode = 6020 // 聊天权限不足
)

// Enum value maps for SocialErrorCode.
var (
	SocialErrorCode_name = map[int32]string{
		0:    "SOCIAL_ERROR_CODE_UNSPECIFIED",
		6001: "ERR_FRIEND_NOT_FOUND",
		6002: "ERR_FRIEND_ALREADY_EXISTS",
		6003: "ERR_FRIEND_REQUEST_FAILED",
		6004: "ERR_FRIEND_ACCEPT_FAILED",
		6005: "ERR_FRIEND_REJECT_FAILED",
		6006: "ERR_FRIEND_REMOVE_FAILED",
		6007: "ERR_GUILD_NOT_FOUND",
		6008: "ERR_GUILD_ALREADY_EXISTS",
		6009: "ERR_GUILD_CREATE_FAILED",
		6010: "ERR_GUILD_JOIN_FAILED",
		6011: "ERR_GUILD_LEAVE_FAILED",
		6012: "ERR_GUILD_PERMISSION_DENIED",
		6013: "ERR_TEAM_NOT_FOUND",
		6014: "ERR_TEAM_ALREADY_EXISTS",
		6015: "ERR_TEAM_CREATE_FAILED",
		6016: "ERR_TEAM_JOIN_FAILED",
		6017: "ERR_TEAM_LEAVE_FAILED",
		6018: "ERR_CHAT_MESSAGE_FAILED",
		6019: "ERR_CHAT_CHANNEL_NOT_FOUND",
		6020: "ERR_CHAT_PERMISSION_DENIED",
	}
	SocialErrorCode_value = map[string]int32{
		"SOCIAL_ERROR_CODE_UNSPECIFIED": 0,
		"ERR_FRIEND_NOT_FOUND":          6001,
		"ERR_FRIEND_ALREADY_EXISTS":     6002,
		"ERR_FRIEND_REQUEST_FAILED":     6003,
		"ERR_FRIEND_ACCEPT_FAILED":      6004,
		"ERR_FRIEND_REJECT_FAILED":      6005,
		"ERR_FRIEND_REMOVE_FAILED":      6006,
		"ERR_GUILD_NOT_FOUND":           6007,
		"ERR_GUILD_ALREADY_EXISTS":      6008,
		"ERR_GUILD_CREATE_FAILED":       6009,
		"ERR_GUILD_JOIN_FAILED":         6010,
		"ERR_GUILD_LEAVE_FAILED":        6011,
		"ERR_GUILD_PERMISSION_DENIED":   6012,
		"ERR_TEAM_NOT_FOUND":            6013,
		"ERR_TEAM_ALREADY_EXISTS":       6014,
		"ERR_TEAM_CREATE_FAILED":        6015,
		"ERR_TEAM_JOIN_FAILED":          6016,
		"ERR_TEAM_LEAVE_FAILED":         6017,
		"ERR_CHAT_MESSAGE_FAILED":       6018,
		"ERR_CHAT_CHANNEL_NOT_FOUND":    6019,
		"ERR_CHAT_PERMISSION_DENIED":    6020,
	}
)

func (x SocialErrorCode) Enum() *SocialErrorCode {
	p := new(SocialErrorCode)
	*p = x
	return p
}

func (x SocialErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocialErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[5].Descriptor()
}

func (SocialErrorCode) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[5]
}

func (x SocialErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocialErrorCode.Descriptor instead.
func (SocialErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{5}
}

// 错误码枚举 - 任务相关错误 (7000-7999)
type QuestErrorCode int32

const (
	QuestErrorCode_QUEST_ERROR_CODE_UNSPECIFIED   QuestErrorCode = 0
	QuestErrorCode_ERR_QUEST_NOT_FOUND            QuestErrorCode = 7001 // 任务未找到
	QuestErrorCode_ERR_QUEST_ALREADY_ACCEPTED     QuestErrorCode = 7002 // 任务已接受
	QuestErrorCode_ERR_QUEST_NOT_ACCEPTED         QuestErrorCode = 7003 // 任务未接受
	QuestErrorCode_ERR_QUEST_ALREADY_COMPLETED    QuestErrorCode = 7004 // 任务已完成
	QuestErrorCode_ERR_QUEST_NOT_COMPLETED        QuestErrorCode = 7005 // 任务未完成
	QuestErrorCode_ERR_QUEST_ACCEPT_FAILED        QuestErrorCode = 7006 // 接受任务失败
	QuestErrorCode_ERR_QUEST_COMPLETE_FAILED      QuestErrorCode = 7007 // 完成任务失败
	QuestErrorCode_ERR_QUEST_CANCEL_FAILED        QuestErrorCode = 7008 // 取消任务失败
	QuestErrorCode_ERR_QUEST_REQUIREMENTS_NOT_MET QuestErrorCode = 7009 // 任务要求未满足
	QuestErrorCode_ERR_QUEST_REWARD_FAILED        QuestErrorCode = 7010 // 任务奖励失败
	QuestErrorCode_ERR_QUEST_LEVEL_TOO_LOW        QuestErrorCode = 7011 // 任务等级过低
	QuestErrorCode_ERR_QUEST_LEVEL_TOO_HIGH       QuestErrorCode = 7012 // 任务等级过高
	QuestErrorCode_ERR_QUEST_PREREQUISITE_NOT_MET QuestErrorCode = 7013 // 前置任务未完成
)

// Enum value maps for QuestErrorCode.
var (
	QuestErrorCode_name = map[int32]string{
		0:    "QUEST_ERROR_CODE_UNSPECIFIED",
		7001: "ERR_QUEST_NOT_FOUND",
		7002: "ERR_QUEST_ALREADY_ACCEPTED",
		7003: "ERR_QUEST_NOT_ACCEPTED",
		7004: "ERR_QUEST_ALREADY_COMPLETED",
		7005: "ERR_QUEST_NOT_COMPLETED",
		7006: "ERR_QUEST_ACCEPT_FAILED",
		7007: "ERR_QUEST_COMPLETE_FAILED",
		7008: "ERR_QUEST_CANCEL_FAILED",
		7009: "ERR_QUEST_REQUIREMENTS_NOT_MET",
		7010: "ERR_QUEST_REWARD_FAILED",
		7011: "ERR_QUEST_LEVEL_TOO_LOW",
		7012: "ERR_QUEST_LEVEL_TOO_HIGH",
		7013: "ERR_QUEST_PREREQUISITE_NOT_MET",
	}
	QuestErrorCode_value = map[string]int32{
		"QUEST_ERROR_CODE_UNSPECIFIED":   0,
		"ERR_QUEST_NOT_FOUND":            7001,
		"ERR_QUEST_ALREADY_ACCEPTED":     7002,
		"ERR_QUEST_NOT_ACCEPTED":         7003,
		"ERR_QUEST_ALREADY_COMPLETED":    7004,
		"ERR_QUEST_NOT_COMPLETED":        7005,
		"ERR_QUEST_ACCEPT_FAILED":        7006,
		"ERR_QUEST_COMPLETE_FAILED":      7007,
		"ERR_QUEST_CANCEL_FAILED":        7008,
		"ERR_QUEST_REQUIREMENTS_NOT_MET": 7009,
		"ERR_QUEST_REWARD_FAILED":        7010,
		"ERR_QUEST_LEVEL_TOO_LOW":        7011,
		"ERR_QUEST_LEVEL_TOO_HIGH":       7012,
		"ERR_QUEST_PREREQUISITE_NOT_MET": 7013,
	}
)

func (x QuestErrorCode) Enum() *QuestErrorCode {
	p := new(QuestErrorCode)
	*p = x
	return p
}

func (x QuestErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[6].Descriptor()
}

func (QuestErrorCode) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[6]
}

func (x QuestErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestErrorCode.Descriptor instead.
func (QuestErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{6}
}

// 错误码枚举 - 系统相关错误 (8000-8999)
type SystemErrorCode int32

const (
	SystemErrorCode_SYSTEM_ERROR_CODE_UNSPECIFIED  SystemErrorCode = 0
	SystemErrorCode_ERR_DATABASE_CONNECTION_FAILED SystemErrorCode = 8001 // 数据库连接失败
	SystemErrorCode_ERR_DATABASE_QUERY_FAILED      SystemErrorCode = 8002 // 数据库查询失败
	SystemErrorCode_ERR_DATABASE_UPDATE_FAILED     SystemErrorCode = 8003 // 数据库更新失败
	SystemErrorCode_ERR_DATABASE_INSERT_FAILED     SystemErrorCode = 8004 // 数据库插入失败
	SystemErrorCode_ERR_DATABASE_DELETE_FAILED     SystemErrorCode = 8005 // 数据库删除失败
	SystemErrorCode_ERR_CACHE_CONNECTION_FAILED    SystemErrorCode = 8006 // 缓存连接失败
	SystemErrorCode_ERR_CACHE_GET_FAILED           SystemErrorCode = 8007 // 缓存获取失败
	SystemErrorCode_ERR_CACHE_SET_FAILED           SystemErrorCode = 8008 // 缓存设置失败
	SystemErrorCode_ERR_CACHE_DELETE_FAILED        SystemErrorCode = 8009 // 缓存删除失败
	SystemErrorCode_ERR_REDIS_CONNECTION_FAILED    SystemErrorCode = 8010 // Redis连接失败
	SystemErrorCode_ERR_REDIS_OPERATION_FAILED     SystemErrorCode = 8011 // Redis操作失败
	SystemErrorCode_ERR_MONGODB_CONNECTION_FAILED  SystemErrorCode = 8012 // MongoDB连接失败
	SystemErrorCode_ERR_MONGODB_OPERATION_FAILED   SystemErrorCode = 8013 // MongoDB操作失败
	SystemErrorCode_ERR_CONFIG_LOAD_FAILED         SystemErrorCode = 8014 // 配置加载失败
	SystemErrorCode_ERR_LOG_WRITE_FAILED           SystemErrorCode = 8015 // 日志写入失败
)

// Enum value maps for SystemErrorCode.
var (
	SystemErrorCode_name = map[int32]string{
		0:    "SYSTEM_ERROR_CODE_UNSPECIFIED",
		8001: "ERR_DATABASE_CONNECTION_FAILED",
		8002: "ERR_DATABASE_QUERY_FAILED",
		8003: "ERR_DATABASE_UPDATE_FAILED",
		8004: "ERR_DATABASE_INSERT_FAILED",
		8005: "ERR_DATABASE_DELETE_FAILED",
		8006: "ERR_CACHE_CONNECTION_FAILED",
		8007: "ERR_CACHE_GET_FAILED",
		8008: "ERR_CACHE_SET_FAILED",
		8009: "ERR_CACHE_DELETE_FAILED",
		8010: "ERR_REDIS_CONNECTION_FAILED",
		8011: "ERR_REDIS_OPERATION_FAILED",
		8012: "ERR_MONGODB_CONNECTION_FAILED",
		8013: "ERR_MONGODB_OPERATION_FAILED",
		8014: "ERR_CONFIG_LOAD_FAILED",
		8015: "ERR_LOG_WRITE_FAILED",
	}
	SystemErrorCode_value = map[string]int32{
		"SYSTEM_ERROR_CODE_UNSPECIFIED":  0,
		"ERR_DATABASE_CONNECTION_FAILED": 8001,
		"ERR_DATABASE_QUERY_FAILED":      8002,
		"ERR_DATABASE_UPDATE_FAILED":     8003,
		"ERR_DATABASE_INSERT_FAILED":     8004,
		"ERR_DATABASE_DELETE_FAILED":     8005,
		"ERR_CACHE_CONNECTION_FAILED":    8006,
		"ERR_CACHE_GET_FAILED":           8007,
		"ERR_CACHE_SET_FAILED":           8008,
		"ERR_CACHE_DELETE_FAILED":        8009,
		"ERR_REDIS_CONNECTION_FAILED":    8010,
		"ERR_REDIS_OPERATION_FAILED":     8011,
		"ERR_MONGODB_CONNECTION_FAILED":  8012,
		"ERR_MONGODB_OPERATION_FAILED":   8013,
		"ERR_CONFIG_LOAD_FAILED":         8014,
		"ERR_LOG_WRITE_FAILED":           8015,
	}
)

func (x SystemErrorCode) Enum() *SystemErrorCode {
	p := new(SystemErrorCode)
	*p = x
	return p
}

func (x SystemErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[7].Descriptor()
}

func (SystemErrorCode) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[7]
}

func (x SystemErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemErrorCode.Descriptor instead.
func (SystemErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{7}
}

// 错误信息结构
type ErrorInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorCode     int32                  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`                                                     // 错误码
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                             // 错误消息
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`                                                      // 错误类型
	Details       string                 `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`                                                                           // 详细信息
	Timestamp     int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                      // 时间戳
	RequestId     string                 `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                                                      // 请求ID
	Context       map[string]string      `protobuf:"bytes,7,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 上下文信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	mi := &file_proto_errors_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_errors_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorInfo) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ErrorInfo) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ErrorInfo) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

func (x *ErrorInfo) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *ErrorInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ErrorInfo) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ErrorInfo) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

// 错误响应结构
type ErrorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                     // 是否成功
	Error         *ErrorInfo             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                          // 错误信息
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                      // 响应消息
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                 // 时间戳
	RequestId     string                 `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // 请求ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_proto_errors_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_errors_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ErrorResponse) GetError() *ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ErrorResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

var File_proto_errors_proto protoreflect.FileDescriptor

const file_proto_errors_proto_rawDesc = "" +
	"\n" +
	"\x12proto/errors.proto\x12\x14greatestworks.errors\"\xc9\x02\n" +
	"\tErrorInfo\x12\x1d\n" +
	"\n" +
	"error_code\x18\x01 \x01(\x05R\terrorCode\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\x12\x18\n" +
	"\adetails\x18\x04 \x01(\tR\adetails\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\x12\x1d\n" +
	"\n" +
	"request_id\x18\x06 \x01(\tR\trequestId\x12F\n" +
	"\acontext\x18\a \x03(\v2,.greatestworks.errors.ErrorInfo.ContextEntryR\acontext\x1a:\n" +
	"\fContextEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb7\x01\n" +
	"\rErrorResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x125\n" +
	"\x05error\x18\x02 \x01(\v2\x1f.greatestworks.errors.ErrorInfoR\x05error\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x12\x1d\n" +
	"\n" +
	"request_id\x18\x05 \x01(\tR\trequestId*\xcb\x03\n" +
	"\x0fCommonErrorCode\x12!\n" +
	"\x1dCOMMON_ERROR_CODE_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vERR_SUCCESS\x10\x00\x12\x10\n" +
	"\vERR_UNKNOWN\x10\xe8\a\x12\x18\n" +
	"\x13ERR_INVALID_MESSAGE\x10\xe9\a\x12\x14\n" +
	"\x0fERR_AUTH_FAILED\x10\xea\a\x12\x19\n" +
	"\x14ERR_PLAYER_NOT_FOUND\x10\xeb\a\x12\x19\n" +
	"\x14ERR_BATTLE_NOT_FOUND\x10\xec\a\x12\x18\n" +
	"\x13ERR_UNKNOWN_MESSAGE\x10\xed\a\x12\x14\n" +
	"\x0fERR_SERVER_BUSY\x10\xee\a\x12\x17\n" +
	"\x12ERR_INVALID_PLAYER\x10\xef\a\x12\x1a\n" +
	"\x15ERR_PERMISSION_DENIED\x10\xf0\a\x12\x15\n" +
	"\x10ERR_RATE_LIMITED\x10\xf1\a\x12\x14\n" +
	"\x0fERR_MAINTENANCE\x10\xf2\a\x12\x18\n" +
	"\x13ERR_INVALID_REQUEST\x10\xf3\a\x12\x10\n" +
	"\vERR_TIMEOUT\x10\xf4\a\x12\x18\n" +
	"\x13ERR_CONNECTION_LOST\x10\xf5\a\x12\x16\n" +
	"\x11ERR_INVALID_TOKEN\x10\xf6\a\x12\x18\n" +
	"\x13ERR_SESSION_EXPIRED\x10\xf7\a\x1a\x02\x10\x01*\xbb\x04\n" +
	"\x0fBattleErrorCode\x12!\n" +
	"\x1dBATTLE_ERROR_CODE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x16ERR_INVALID_CREATOR_ID\x10\xd1\x0f\x12\x1c\n" +
	"\x17ERR_INVALID_BATTLE_TYPE\x10\xd2\x0f\x12\x1a\n" +
	"\x15ERR_INVALID_BATTLE_ID\x10\xd3\x0f\x12\x1a\n" +
	"\x15ERR_INVALID_PLAYER_ID\x10\xd4\x0f\x12\x1a\n" +
	"\x15ERR_INVALID_TARGET_ID\x10\xd5\x0f\x12\x19\n" +
	"\x14ERR_INVALID_SKILL_ID\x10\xd6\x0f\x12\x15\n" +
	"\x10ERR_INVALID_TEAM\x10\xd7\x0f\x12\x1f\n" +
	"\x1aERR_BATTLE_ALREADY_STARTED\x10\xd8\x0f\x12\x1b\n" +
	"\x16ERR_BATTLE_NOT_STARTED\x10\xd9\x0f\x12\x1d\n" +
	"\x18ERR_PLAYER_NOT_IN_BATTLE\x10\xda\x0f\x12\x1a\n" +
	"\x15ERR_INSUFFICIENT_MANA\x10\xdb\x0f\x12\x1a\n" +
	"\x15ERR_SKILL_ON_COOLDOWN\x10\xdc\x0f\x12\x17\n" +
	"\x12ERR_INVALID_ACTION\x10\xdd\x0f\x12\x14\n" +
	"\x0fERR_BATTLE_FULL\x10\xde\x0f\x12\x15\n" +
	"\x10ERR_BATTLE_ENDED\x10\xdf\x0f\x12\x16\n" +
	"\x11ERR_NOT_YOUR_TURN\x10\xe0\x0f\x12\x19\n" +
	"\x14ERR_BATTLE_CANCELLED\x10\xe1\x0f\x12\x1d\n" +
	"\x18ERR_INVALID_BATTLE_STATE\x10\xe2\x0f\x12\x17\n" +
	"\x12ERR_BATTLE_TIMEOUT\x10\xe3\x0f*\xaf\x03\n" +
	"\fPetErrorCode\x12\x1e\n" +
	"\x1aPET_ERROR_CODE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x11ERR_PET_NOT_FOUND\x10\xb9\x17\x12\x1b\n" +
	"\x16ERR_PET_ALREADY_ACTIVE\x10\xba\x17\x12\x17\n" +
	"\x12ERR_PET_NOT_ACTIVE\x10\xbb\x17\x12\x1a\n" +
	"\x15ERR_PET_LEVEL_TOO_LOW\x10\xbc\x17\x12\x1b\n" +
	"\x16ERR_PET_EVOLUTION_FAIL\x10\xbd\x17\x12\x1d\n" +
	"\x18ERR_PET_INSUFFICIENT_EXP\x10\xbe\x17\x12\x1c\n" +
	"\x17ERR_PET_ALREADY_EVOLVED\x10\xbf\x17\x12\x1c\n" +
	"\x17ERR_PET_TRAINING_FAILED\x10\xc0\x17\x12\x1b\n" +
	"\x16ERR_PET_FEEDING_FAILED\x10\xc1\x17\x12\x1e\n" +
	"\x19ERR_PET_SKILL_NOT_LEARNED\x10\xc2\x17\x12 \n" +
	"\x1bERR_PET_INSUFFICIENT_ENERGY\x10\xc3\x17\x12\x11\n" +
	"\fERR_PET_SICK\x10\xc4\x17\x12\x11\n" +
	"\fERR_PET_DEAD\x10\xc5\x17\x12\x18\n" +
	"\x13ERR_PET_BOND_FAILED\x10\xc6\x17*\xc9\x03\n" +
	"\rItemErrorCode\x12\x1f\n" +
	"\x1bITEM_ERROR_CODE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x12ERR_ITEM_NOT_FOUND\x10\xa1\x1f\x12\x18\n" +
	"\x13ERR_ITEM_NOT_USABLE\x10\xa2\x1f\x12\x17\n" +
	"\x12ERR_INVENTORY_FULL\x10\xa3\x1f\x12\x1a\n" +
	"\x15ERR_INSUFFICIENT_ITEM\x10\xa4\x1f\x12\x1a\n" +
	"\x15ERR_ITEM_EQUIP_FAILED\x10\xa5\x1f\x12\x1c\n" +
	"\x17ERR_ITEM_UNEQUIP_FAILED\x10\xa6\x1f\x12\x1a\n" +
	"\x15ERR_ITEM_CRAFT_FAILED\x10\xa7\x1f\x12\x1c\n" +
	"\x17ERR_ITEM_ENHANCE_FAILED\x10\xa8\x1f\x12\x1a\n" +
	"\x15ERR_ITEM_TRADE_FAILED\x10\xa9\x1f\x12\x19\n" +
	"\x14ERR_ITEM_DROP_FAILED\x10\xaa\x1f\x12\x1b\n" +
	"\x16ERR_ITEM_PICKUP_FAILED\x10\xab\x1f\x12\x18\n" +
	"\x13ERR_ITEM_STACK_FULL\x10\xac\x1f\x12\x1b\n" +
	"\x16ERR_ITEM_NOT_TRADEABLE\x10\xad\x1f\x12\x13\n" +
	"\x0eERR_ITEM_BOUND\x10\xae\x1f\x12\x1b\n" +
	"\x16ERR_ITEM_LEVEL_TOO_LOW\x10\xaf\x1f*\xd0\x03\n" +
	"\x11BuildingErrorCode\x12#\n" +
	"\x1fBUILDING_ERROR_CODE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x16ERR_BUILDING_NOT_FOUND\x10\x89'\x12 \n" +
	"\x1bERR_BUILDING_ALREADY_EXISTS\x10\x8a'\x12(\n" +
	"#ERR_BUILDING_INSUFFICIENT_RESOURCES\x10\x8b'\x12 \n" +
	"\x1bERR_BUILDING_UPGRADE_FAILED\x10\x8c'\x12 \n" +
	"\x1bERR_BUILDING_DESTROY_FAILED\x10\x8d'\x12 \n" +
	"\x1bERR_BUILDING_PRODUCE_FAILED\x10\x8e'\x12 \n" +
	"\x1bERR_BUILDING_COLLECT_FAILED\x10\x8f'\x12\x1f\n" +
	"\x1aERR_BUILDING_REPAIR_FAILED\x10\x90'\x12\x1f\n" +
	"\x1aERR_BUILDING_LEVEL_TOO_LOW\x10\x91'\x12 \n" +
	"\x1bERR_BUILDING_LEVEL_TOO_HIGH\x10\x92'\x12\x1b\n" +
	"\x16ERR_BUILDING_NOT_READY\x10\x93'\x12$\n" +
	"\x1fERR_BUILDING_UNDER_CONSTRUCTION\x10\x94'*\x89\x05\n" +
	"\x0fSocialErrorCode\x12!\n" +
	"\x1dSOCIAL_ERROR_CODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x14ERR_FRIEND_NOT_FOUND\x10\xf1.\x12\x1e\n" +
	"\x19ERR_FRIEND_ALREADY_EXISTS\x10\xf2.\x12\x1e\n" +
	"\x19ERR_FRIEND_REQUEST_FAILED\x10\xf3.\x12\x1d\n" +
	"\x18ERR_FRIEND_ACCEPT_FAILED\x10\xf4.\x12\x1d\n" +
	"\x18ERR_FRIEND_REJECT_FAILED\x10\xf5.\x12\x1d\n" +
	"\x18ERR_FRIEND_REMOVE_FAILED\x10\xf6.\x12\x18\n" +
	"\x13ERR_GUILD_NOT_FOUND\x10\xf7.\x12\x1d\n" +
	"\x18ERR_GUILD_ALREADY_EXISTS\x10\xf8.\x12\x1c\n" +
	"\x17ERR_GUILD_CREATE_FAILED\x10\xf9.\x12\x1a\n" +
	"\x15ERR_GUILD_JOIN_FAILED\x10\xfa.\x12\x1b\n" +
	"\x16ERR_GUILD_LEAVE_FAILED\x10\xfb.\x12 \n" +
	"\x1bERR_GUILD_PERMISSION_DENIED\x10\xfc.\x12\x17\n" +
	"\x12ERR_TEAM_NOT_FOUND\x10\xfd.\x12\x1c\n" +
	"\x17ERR_TEAM_ALREADY_EXISTS\x10\xfe.\x12\x1b\n" +
	"\x16ERR_TEAM_CREATE_FAILED\x10\xff.\x12\x19\n" +
	"\x14ERR_TEAM_JOIN_FAILED\x10\x80/\x12\x1a\n" +
	"\x15ERR_TEAM_LEAVE_FAILED\x10\x81/\x12\x1c\n" +
	"\x17ERR_CHAT_MESSAGE_FAILED\x10\x82/\x12\x1f\n" +
	"\x1aERR_CHAT_CHANNEL_NOT_FOUND\x10\x83/\x12\x1f\n" +
	"\x1aERR_CHAT_PERMISSION_DENIED\x10\x84/*\xcb\x03\n" +
	"\x0eQuestErrorCode\x12 \n" +
	"\x1cQUEST_ERROR_CODE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x13ERR_QUEST_NOT_FOUND\x10\xd96\x12\x1f\n" +
	"\x1aERR_QUEST_ALREADY_ACCEPTED\x10\xda6\x12\x1b\n" +
	"\x16ERR_QUEST_NOT_ACCEPTED\x10\xdb6\x12 \n" +
	"\x1bERR_QUEST_ALREADY_COMPLETED\x10\xdc6\x12\x1c\n" +
	"\x17ERR_QUEST_NOT_COMPLETED\x10\xdd6\x12\x1c\n" +
	"\x17ERR_QUEST_ACCEPT_FAILED\x10\xde6\x12\x1e\n" +
	"\x19ERR_QUEST_COMPLETE_FAILED\x10\xdf6\x12\x1c\n" +
	"\x17ERR_QUEST_CANCEL_FAILED\x10\xe06\x12#\n" +
	"\x1eERR_QUEST_REQUIREMENTS_NOT_MET\x10\xe16\x12\x1c\n" +
	"\x17ERR_QUEST_REWARD_FAILED\x10\xe26\x12\x1c\n" +
	"\x17ERR_QUEST_LEVEL_TOO_LOW\x10\xe36\x12\x1d\n" +
	"\x18ERR_QUEST_LEVEL_TOO_HIGH\x10\xe46\x12#\n" +
	"\x1eERR_QUEST_PREREQUISITE_NOT_MET\x10\xe56*\x94\x04\n" +
	"\x0fSystemErrorCode\x12!\n" +
	"\x1dSYSTEM_ERROR_CODE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1eERR_DATABASE_CONNECTION_FAILED\x10\xc1>\x12\x1e\n" +
	"\x19ERR_DATABASE_QUERY_FAILED\x10\xc2>\x12\x1f\n" +
	"\x1aERR_DATABASE_UPDATE_FAILED\x10\xc3>\x12\x1f\n" +
	"\x1aERR_DATABASE_INSERT_FAILED\x10\xc4>\x12\x1f\n" +
	"\x1aERR_DATABASE_DELETE_FAILED\x10\xc5>\x12 \n" +
	"\x1bERR_CACHE_CONNECTION_FAILED\x10\xc6>\x12\x19\n" +
	"\x14ERR_CACHE_GET_FAILED\x10\xc7>\x12\x19\n" +
	"\x14ERR_CACHE_SET_FAILED\x10\xc8>\x12\x1c\n" +
	"\x17ERR_CACHE_DELETE_FAILED\x10\xc9>\x12 \n" +
	"\x1bERR_REDIS_CONNECTION_FAILED\x10\xca>\x12\x1f\n" +
	"\x1aERR_REDIS_OPERATION_FAILED\x10\xcb>\x12\"\n" +
	"\x1dERR_MONGODB_CONNECTION_FAILED\x10\xcc>\x12!\n" +
	"\x1cERR_MONGODB_OPERATION_FAILED\x10\xcd>\x12\x1b\n" +
	"\x16ERR_CONFIG_LOAD_FAILED\x10\xce>\x12\x19\n" +
	"\x14ERR_LOG_WRITE_FAILED\x10\xcf>B<Z#greatestworks/internal/proto/errors\xaa\x02\x14GreatestWorks.Errorsb\x06proto3"

var (
	file_proto_errors_proto_rawDescOnce sync.Once
	file_proto_errors_proto_rawDescData []byte
)

func file_proto_errors_proto_rawDescGZIP() []byte {
	file_proto_errors_proto_rawDescOnce.Do(func() {
		file_proto_errors_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_errors_proto_rawDesc), len(file_proto_errors_proto_rawDesc)))
	})
	return file_proto_errors_proto_rawDescData
}

var file_proto_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_proto_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_errors_proto_goTypes = []any{
	(CommonErrorCode)(0),   // 0: greatestworks.errors.CommonErrorCode
	(BattleErrorCode)(0),   // 1: greatestworks.errors.BattleErrorCode
	(PetErrorCode)(0),      // 2: greatestworks.errors.PetErrorCode
	(ItemErrorCode)(0),     // 3: greatestworks.errors.ItemErrorCode
	(BuildingErrorCode)(0), // 4: greatestworks.errors.BuildingErrorCode
	(SocialErrorCode)(0),   // 5: greatestworks.errors.SocialErrorCode
	(QuestErrorCode)(0),    // 6: greatestworks.errors.QuestErrorCode
	(SystemErrorCode)(0),   // 7: greatestworks.errors.SystemErrorCode
	(*ErrorInfo)(nil),      // 8: greatestworks.errors.ErrorInfo
	(*ErrorResponse)(nil),  // 9: greatestworks.errors.ErrorResponse
	nil,                    // 10: greatestworks.errors.ErrorInfo.ContextEntry
}
var file_proto_errors_proto_depIdxs = []int32{
	10, // 0: greatestworks.errors.ErrorInfo.context:type_name -> greatestworks.errors.ErrorInfo.ContextEntry
	8,  // 1: greatestworks.errors.ErrorResponse.error:type_name -> greatestworks.errors.ErrorInfo
	2,  // [2:2] is the sub-list for method output_type
	2,  // [2:2] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_proto_errors_proto_init() }
func file_proto_errors_proto_init() {
	if File_proto_errors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_errors_proto_rawDesc), len(file_proto_errors_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_errors_proto_goTypes,
		DependencyIndexes: file_proto_errors_proto_depIdxs,
		EnumInfos:         file_proto_errors_proto_enumTypes,
		MessageInfos:      file_proto_errors_proto_msgTypes,
	}.Build()
	File_proto_errors_proto = out.File
	file_proto_errors_proto_goTypes = nil
	file_proto_errors_proto_depIdxs = nil
}
