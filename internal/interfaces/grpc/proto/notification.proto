syntax = "proto3";

package greatestworks.grpc;

import "common.proto";

option go_package = "greatestworks/internal/interfaces/grpc/proto";

// 通知渠道
enum NotificationChannel {
  NOTIFICATION_CHANNEL_UNKNOWN = 0;
  NOTIFICATION_CHANNEL_WEBSOCKET = 1; // WebSocket实时推送
  NOTIFICATION_CHANNEL_EMAIL = 2;     // 邮件
  NOTIFICATION_CHANNEL_SMS = 3;       // 短信
  NOTIFICATION_CHANNEL_PUSH = 4;      // 推送通知
  NOTIFICATION_CHANNEL_SYSTEM = 5;    // 系统内通知
  NOTIFICATION_CHANNEL_GAME = 6;      // 游戏内通知
}

// 通知优先级
enum NotificationPriority {
  NOTIFICATION_PRIORITY_UNKNOWN = 0;
  NOTIFICATION_PRIORITY_LOW = 1;      // 低优先级
  NOTIFICATION_PRIORITY_NORMAL = 2;   // 普通优先级
  NOTIFICATION_PRIORITY_HIGH = 3;     // 高优先级
  NOTIFICATION_PRIORITY_URGENT = 4;   // 紧急
  NOTIFICATION_PRIORITY_CRITICAL = 5; // 严重
}

// 通知状态
enum NotificationStatus {
  NOTIFICATION_STATUS_UNKNOWN = 0;
  NOTIFICATION_STATUS_PENDING = 1;    // 待发送
  NOTIFICATION_STATUS_SENT = 2;       // 已发送
  NOTIFICATION_STATUS_DELIVERED = 3;  // 已送达
  NOTIFICATION_STATUS_READ = 4;       // 已读
  NOTIFICATION_STATUS_FAILED = 5;     // 发送失败
  NOTIFICATION_STATUS_EXPIRED = 6;    // 已过期
}

// 通知模板
message NotificationTemplate {
  string id = 1;
  string name = 2;
  string title_template = 3;
  string content_template = 4;
  NotificationType type = 5;
  NotificationChannel channel = 6;
  NotificationPriority priority = 7;
  map<string, string> default_variables = 8;
  bool is_active = 9;
  int64 created_at = 10;
  int64 updated_at = 11;
}

// 通知消息
message NotificationMessage {
  string id = 1;
  string template_id = 2;
  string recipient_id = 3;
  string recipient_type = 4; // user, group, all
  NotificationType type = 5;
  NotificationChannel channel = 6;
  NotificationPriority priority = 7;
  NotificationStatus status = 8;
  string title = 9;
  string content = 10;
  map<string, string> variables = 11;
  map<string, string> metadata = 12;
  int64 created_at = 13;
  int64 sent_at = 14;
  int64 delivered_at = 15;
  int64 read_at = 16;
  int64 expires_at = 17;
  int32 retry_count = 18;
  string error_message = 19;
}

// 发送通知请求
message SendNotificationRequest {
  string template_id = 1;
  repeated string recipient_ids = 2;
  string recipient_type = 3;
  NotificationChannel channel = 4;
  NotificationPriority priority = 5;
  map<string, string> variables = 6;
  map<string, string> metadata = 7;
  int64 expires_at = 8;
  bool immediate = 9; // 是否立即发送
}

// 发送通知响应
message SendNotificationResponse {
  BaseResponse base = 1;
  repeated string notification_ids = 2;
  int32 success_count = 3;
  int32 failed_count = 4;
  repeated string failed_recipients = 5;
}

// 批量发送通知请求
message BatchSendNotificationRequest {
  repeated SendNotificationRequest notifications = 1;
}

// 批量发送通知响应
message BatchSendNotificationResponse {
  BaseResponse base = 1;
  int32 total_notifications = 2;
  int32 success_count = 3;
  int32 failed_count = 4;
  repeated string failed_notification_ids = 5;
}

// 获取通知请求
message GetNotificationRequest {
  string notification_id = 1;
}

// 获取通知响应
message GetNotificationResponse {
  BaseResponse base = 1;
  NotificationMessage notification = 2;
  bool found = 3;
}

// 查询通知请求
message QueryNotificationsRequest {
  string recipient_id = 1;
  string recipient_type = 2;
  repeated NotificationType types = 3;
  repeated NotificationChannel channels = 4;
  repeated NotificationStatus statuses = 5;
  TimeRange time_range = 6;
  QueryCondition condition = 7;
}

// 查询通知响应
message QueryNotificationsResponse {
  BaseResponse base = 1;
  repeated NotificationMessage notifications = 2;
  PaginationInfo pagination = 3;
}

// 标记通知已读请求
message MarkNotificationReadRequest {
  repeated string notification_ids = 1;
  string recipient_id = 2;
}

// 标记通知已读响应
message MarkNotificationReadResponse {
  BaseResponse base = 1;
  int32 marked_count = 2;
  repeated string failed_ids = 3;
}

// 删除通知请求
message DeleteNotificationRequest {
  repeated string notification_ids = 1;
  string recipient_id = 2;
  bool soft_delete = 3;
}

// 删除通知响应
message DeleteNotificationResponse {
  BaseResponse base = 1;
  int32 deleted_count = 2;
  repeated string failed_ids = 3;
}

// 获取未读通知数量请求
message GetUnreadCountRequest {
  string recipient_id = 1;
  string recipient_type = 2;
  repeated NotificationType types = 3;
  repeated NotificationChannel channels = 4;
}

// 获取未读通知数量响应
message GetUnreadCountResponse {
  BaseResponse base = 1;
  int32 total_unread = 2;
  map<string, int32> unread_by_type = 3;
  map<string, int32> unread_by_channel = 4;
}

// 通知设置
message NotificationSettings {
  string user_id = 1;
  map<string, bool> channel_enabled = 2; // 渠道开关
  map<string, bool> type_enabled = 3;    // 类型开关
  map<string, string> preferences = 4;   // 偏好设置
  bool do_not_disturb = 5;               // 免打扰模式
  string timezone = 6;                   // 时区
  repeated string quiet_hours = 7;       // 静默时间段
  int64 updated_at = 8;
}

// 获取通知设置请求
message GetNotificationSettingsRequest {
  string user_id = 1;
}

// 获取通知设置响应
message GetNotificationSettingsResponse {
  BaseResponse base = 1;
  NotificationSettings settings = 2;
}

// 更新通知设置请求
message UpdateNotificationSettingsRequest {
  string user_id = 1;
  NotificationSettings settings = 2;
}

// 更新通知设置响应
message UpdateNotificationSettingsResponse {
  BaseResponse base = 1;
  NotificationSettings updated_settings = 2;
}

// 创建通知模板请求
message CreateNotificationTemplateRequest {
  string name = 1;
  string title_template = 2;
  string content_template = 3;
  NotificationType type = 4;
  NotificationChannel channel = 5;
  NotificationPriority priority = 6;
  map<string, string> default_variables = 7;
}

// 创建通知模板响应
message CreateNotificationTemplateResponse {
  BaseResponse base = 1;
  NotificationTemplate template = 2;
}

// 获取通知模板请求
message GetNotificationTemplateRequest {
  string template_id = 1;
}

// 获取通知模板响应
message GetNotificationTemplateResponse {
  BaseResponse base = 1;
  NotificationTemplate template = 2;
  bool found = 3;
}

// 更新通知模板请求
message UpdateNotificationTemplateRequest {
  string template_id = 1;
  NotificationTemplate template = 2;
}

// 更新通知模板响应
message UpdateNotificationTemplateResponse {
  BaseResponse base = 1;
  NotificationTemplate updated_template = 2;
}

// 删除通知模板请求
message DeleteNotificationTemplateRequest {
  string template_id = 1;
}

// 删除通知模板响应
message DeleteNotificationTemplateResponse {
  BaseResponse base = 1;
}

// 查询通知模板请求
message QueryNotificationTemplatesRequest {
  QueryCondition condition = 1;
  repeated NotificationType types = 2;
  repeated NotificationChannel channels = 3;
  bool active_only = 4;
}

// 查询通知模板响应
message QueryNotificationTemplatesResponse {
  BaseResponse base = 1;
  repeated NotificationTemplate templates = 2;
  PaginationInfo pagination = 3;
}

// 实时通知推送
message RealtimeNotification {
  string notification_id = 1;
  string recipient_id = 2;
  NotificationType type = 3;
  NotificationPriority priority = 4;
  string title = 5;
  string content = 6;
  map<string, string> data = 7;
  int64 timestamp = 8;
  bool requires_ack = 9; // 是否需要确认
}

// 实时通知确认请求
message AckRealtimeNotificationRequest {
  string notification_id = 1;
  string recipient_id = 2;
  int64 ack_timestamp = 3;
}

// 实时通知确认响应
message AckRealtimeNotificationResponse {
  BaseResponse base = 1;
}

// 订阅实时通知请求
message SubscribeRealtimeNotificationsRequest {
  string user_id = 1;
  repeated NotificationType types = 2;
  repeated NotificationChannel channels = 3;
  map<string, string> filters = 4;
}

// 订阅实时通知响应
message SubscribeRealtimeNotificationsResponse {
  BaseResponse base = 1;
  string subscription_id = 2;
}

// 取消订阅实时通知请求
message UnsubscribeRealtimeNotificationsRequest {
  string subscription_id = 1;
  string user_id = 2;
}

// 取消订阅实时通知响应
message UnsubscribeRealtimeNotificationsResponse {
  BaseResponse base = 1;
}

// 通知统计
message NotificationStatistics {
  int32 total_sent = 1;
  int32 total_delivered = 2;
  int32 total_read = 3;
  int32 total_failed = 4;
  float delivery_rate = 5;
  float read_rate = 6;
  map<string, int32> by_channel = 7;
  map<string, int32> by_type = 8;
  map<string, int32> by_status = 9;
  TimeRange time_range = 10;
}

// 获取通知统计请求
message GetNotificationStatisticsRequest {
  TimeRange time_range = 1;
  repeated string recipient_ids = 2;
  repeated NotificationType types = 3;
  repeated NotificationChannel channels = 4;
}

// 获取通知统计响应
message GetNotificationStatisticsResponse {
  BaseResponse base = 1;
  NotificationStatistics statistics = 2;
}

// 通知服务接口
service NotificationService {
  // 发送通知
  rpc SendNotification(SendNotificationRequest) returns (SendNotificationResponse);
  
  // 批量发送通知
  rpc BatchSendNotification(BatchSendNotificationRequest) returns (BatchSendNotificationResponse);
  
  // 获取通知
  rpc GetNotification(GetNotificationRequest) returns (GetNotificationResponse);
  
  // 查询通知
  rpc QueryNotifications(QueryNotificationsRequest) returns (QueryNotificationsResponse);
  
  // 标记通知已读
  rpc MarkNotificationRead(MarkNotificationReadRequest) returns (MarkNotificationReadResponse);
  
  // 删除通知
  rpc DeleteNotification(DeleteNotificationRequest) returns (DeleteNotificationResponse);
  
  // 获取未读通知数量
  rpc GetUnreadCount(GetUnreadCountRequest) returns (GetUnreadCountResponse);
  
  // 获取通知设置
  rpc GetNotificationSettings(GetNotificationSettingsRequest) returns (GetNotificationSettingsResponse);
  
  // 更新通知设置
  rpc UpdateNotificationSettings(UpdateNotificationSettingsRequest) returns (UpdateNotificationSettingsResponse);
  
  // 创建通知模板
  rpc CreateNotificationTemplate(CreateNotificationTemplateRequest) returns (CreateNotificationTemplateResponse);
  
  // 获取通知模板
  rpc GetNotificationTemplate(GetNotificationTemplateRequest) returns (GetNotificationTemplateResponse);
  
  // 更新通知模板
  rpc UpdateNotificationTemplate(UpdateNotificationTemplateRequest) returns (UpdateNotificationTemplateResponse);
  
  // 删除通知模板
  rpc DeleteNotificationTemplate(DeleteNotificationTemplateRequest) returns (DeleteNotificationTemplateResponse);
  
  // 查询通知模板
  rpc QueryNotificationTemplates(QueryNotificationTemplatesRequest) returns (QueryNotificationTemplatesResponse);
  
  // 订阅实时通知
  rpc SubscribeRealtimeNotifications(SubscribeRealtimeNotificationsRequest) returns (SubscribeRealtimeNotificationsResponse);
  
  // 取消订阅实时通知
  rpc UnsubscribeRealtimeNotifications(UnsubscribeRealtimeNotificationsRequest) returns (UnsubscribeRealtimeNotificationsResponse);
  
  // 实时通知推送流
  rpc RealtimeNotificationStream(SubscribeRealtimeNotificationsRequest) returns (stream RealtimeNotification);
  
  // 确认实时通知
  rpc AckRealtimeNotification(AckRealtimeNotificationRequest) returns (AckRealtimeNotificationResponse);
  
  // 获取通知统计
  rpc GetNotificationStatistics(GetNotificationStatisticsRequest) returns (GetNotificationStatisticsResponse);
}