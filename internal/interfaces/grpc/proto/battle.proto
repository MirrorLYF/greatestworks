syntax = "proto3";

package greatestworks.grpc;

import "common.proto";
import "player.proto";

option go_package = "greatestworks/internal/interfaces/grpc/proto";

// Battle type
enum BattleType {
  BATTLE_TYPE_UNKNOWN = 0;
  BATTLE_TYPE_PVP = 1;      // Player vs Player
  BATTLE_TYPE_PVE = 2;      // Player vs Environment
  BATTLE_TYPE_GUILD = 3;    // Guild battle
  BATTLE_TYPE_TOURNAMENT = 4; // Tournament
  BATTLE_TYPE_RAID = 5;     // Raid
}

// Battle status
enum BattleStatus {
  BATTLE_STATUS_UNKNOWN = 0;
  BATTLE_STATUS_WAITING = 1;    // Waiting
  BATTLE_STATUS_PREPARING = 2;  // Preparing
  BATTLE_STATUS_ACTIVE = 3;     // Active
  BATTLE_STATUS_PAUSED = 4;     // 暂停
  BATTLE_STATUS_FINISHED = 5;   // 已结�?
  BATTLE_STATUS_CANCELLED = 6;  // 已取�?
}

// 战斗结果
enum BattleResult {
  BATTLE_RESULT_UNKNOWN = 0;
  BATTLE_RESULT_WIN = 1;     // 胜利
  BATTLE_RESULT_LOSE = 2;    // Lose
  BATTLE_RESULT_DRAW = 3;    // Draw
  BATTLE_RESULT_TIMEOUT = 4; // Timeout
  BATTLE_RESULT_FORFEIT = 5; // Forfeit
}

// Action type
enum ActionType {
  ACTION_TYPE_UNKNOWN = 0;
  ACTION_TYPE_ATTACK = 1;    // Attack
  ACTION_TYPE_DEFEND = 2;    // Defend
  ACTION_TYPE_SKILL = 3;     // 技�?
  ACTION_TYPE_ITEM = 4;      // Use item
  ACTION_TYPE_MOVE = 5;      // Move
  ACTION_TYPE_WAIT = 6;      // Wait
  ACTION_TYPE_SURRENDER = 7; // Surrender
}

// Battle settings
message BattleSettings {
  int32 time_limit = 1;      // 时间限制（秒�?
  int32 max_players = 2;     // Maximum players
  bool allow_pets = 3;       // Allow pets
  bool allow_items = 4;      // Allow items
  bool friendly_fire = 5;    // Friendly fire
  bool auto_battle = 6;      // Auto battle
  map<string, string> custom_rules = 7; // 自定义规�?
}

// 战斗参与�?
message BattleParticipant {
  string id = 1;
  string player_id = 2;
  string name = 3;
  int32 team = 4;           // Team number
  Position position = 5;
  Stats stats = 6;
  bool is_ready = 7;
  bool is_alive = 8;
  int64 joined_at = 9;
  map<string, string> metadata = 10;
}

// Battle information
message BattleInfo {
  string id = 1;
  BattleType type = 2;
  BattleStatus status = 3;
  string name = 4;
  string description = 5;
  BattleSettings settings = 6;
  repeated BattleParticipant participants = 7;
  string creator_id = 8;
  string winner_id = 9;
  BattleResult result = 10;
  int64 created_at = 11;
  int64 started_at = 12;
  int64 finished_at = 13;
  int32 current_round = 14;
  int32 max_rounds = 15;
  map<string, string> metadata = 16;
}

// 战斗行动
message BattleAction {
  string id = 1;
  string battle_id = 2;
  string player_id = 3;
  ActionType type = 4;
  string target_id = 5;      // Target ID
  string skill_id = 6;       // 技能ID
  string item_id = 7;        // 物品ID
  Position target_position = 8;
  map<string, string> parameters = 9;
  int64 timestamp = 10;
  int32 round = 11;
  int32 sequence = 12;
}

// 战斗行动结果
message BattleActionResult {
  string action_id = 1;
  bool success = 2;
  string message = 3;
  int32 damage = 4;
  int32 healing = 5;
  repeated string effects = 6; // 效果列表
  map<string, int32> stat_changes = 7; // 属性变�?
  bool is_critical = 8;      // 是否暴击
  bool is_miss = 9;          // 是否未命�?
  map<string, string> metadata = 10;
}

// 创建战斗请求
message CreateBattleRequest {
  string creator_id = 1;
  BattleType type = 2;
  string name = 3;
  string description = 4;
  BattleSettings settings = 5;
  repeated string invited_players = 6;
  map<string, string> metadata = 7;
}

// 创建战斗响应
message CreateBattleResponse {
  BaseResponse base = 1;
  BattleInfo battle = 2;
}

// 获取战斗请求
message GetBattleRequest {
  string battle_id = 1;
  bool include_participants = 2;
  bool include_actions = 3;
}

// 获取战斗响应
message GetBattleResponse {
  BaseResponse base = 1;
  BattleInfo battle = 2;
  bool found = 3;
}

// 加入战斗请求
message JoinBattleRequest {
  string battle_id = 1;
  string player_id = 2;
  int32 team = 3;
  string invitation_code = 4;
  map<string, string> join_data = 5;
}

// 加入战斗响应
message JoinBattleResponse {
  BaseResponse base = 1;
  BattleInfo battle = 2;
  BattleParticipant participant = 3;
}

// 离开战斗请求
message LeaveBattleRequest {
  string battle_id = 1;
  string player_id = 2;
  string reason = 3;
}

// 离开战斗响应
message LeaveBattleResponse {
  BaseResponse base = 1;
  BattleInfo battle = 2;
}

// 开始战斗请�?
message StartBattleRequest {
  string battle_id = 1;
  string requester_id = 2;
  bool force_start = 3;
}

// 开始战斗响�?
message StartBattleResponse {
  BaseResponse base = 1;
  BattleInfo battle = 2;
  int64 start_time = 3;
}

// 结束战斗请求
message EndBattleRequest {
  string battle_id = 1;
  string requester_id = 2;
  BattleResult result = 3;
  string winner_id = 4;
  string reason = 5;
}

// 结束战斗响应
message EndBattleResponse {
  BaseResponse base = 1;
  BattleInfo battle = 2;
  repeated BattleReward rewards = 3;
}

// 执行战斗行动请求
message ExecuteBattleActionRequest {
  string battle_id = 1;
  BattleAction action = 2;
  bool validate_turn = 3;
}

// 执行战斗行动响应
message ExecuteBattleActionResponse {
  BaseResponse base = 1;
  BattleActionResult result = 2;
  BattleInfo updated_battle = 3;
  bool battle_ended = 4;
}

// 获取战斗行动历史请求
message GetBattleActionsRequest {
  string battle_id = 1;
  string player_id = 2; // 可选，获取特定玩家的行�?
  int32 round = 3;      // 可选，获取特定回合的行�?
  PaginationRequest pagination = 4;
}

// 获取战斗行动历史响应
message GetBattleActionsResponse {
  BaseResponse base = 1;
  repeated BattleAction actions = 2;
  repeated BattleActionResult results = 3;
  PaginationInfo pagination = 4;
}

// 查询战斗请求
message QueryBattlesRequest {
  QueryCondition condition = 1;
  repeated BattleType types = 2;
  repeated BattleStatus statuses = 3;
  string player_id = 4; // 可选，查询特定玩家的战�?
  TimeRange time_range = 5;
}

// 查询战斗响应
message QueryBattlesResponse {
  BaseResponse base = 1;
  repeated BattleInfo battles = 2;
  PaginationInfo pagination = 3;
}

// 战斗奖励
message BattleReward {
  string player_id = 1;
  int64 exp_reward = 2;
  int32 gold_reward = 3;
  repeated string item_rewards = 4;
  int32 ranking_points = 5;
  map<string, int32> custom_rewards = 6;
}

// 计算战斗奖励请求
message CalculateBattleRewardsRequest {
  string battle_id = 1;
  BattleResult result = 2;
  repeated string participants = 3;
}

// 计算战斗奖励响应
message CalculateBattleRewardsResponse {
  BaseResponse base = 1;
  repeated BattleReward rewards = 2;
}

// 发放战斗奖励请求
message DistributeBattleRewardsRequest {
  string battle_id = 1;
  repeated BattleReward rewards = 2;
}

// 发放战斗奖励响应
message DistributeBattleRewardsResponse {
  BaseResponse base = 1;
  int32 success_count = 2;
  int32 failed_count = 3;
  repeated string failed_players = 4;
}

// 战斗统计
message BattleStatistics {
  string player_id = 1;
  int32 total_battles = 2;
  int32 wins = 3;
  int32 losses = 4;
  int32 draws = 5;
  float win_rate = 6;
  int32 total_damage = 7;
  int32 total_healing = 8;
  int32 kills = 9;
  int32 deaths = 10;
  float kd_ratio = 11;
  int32 ranking_points = 12;
  int64 total_battle_time = 13;
  map<string, int32> custom_stats = 14;
}

// 获取战斗统计请求
message GetBattleStatisticsRequest {
  string player_id = 1;
  BattleType battle_type = 2; // 可选，特定类型的统�?
  TimeRange time_range = 3;   // 可选，时间范围
}

// 获取战斗统计响应
message GetBattleStatisticsResponse {
  BaseResponse base = 1;
  BattleStatistics statistics = 2;
}

// 更新战斗统计请求
message UpdateBattleStatisticsRequest {
  string player_id = 1;
  string battle_id = 2;
  BattleResult result = 3;
  int32 damage_dealt = 4;
  int32 healing_done = 5;
  int32 kills = 6;
  int32 deaths = 7;
  int64 battle_duration = 8;
  map<string, int32> custom_stats = 9;
}

// 更新战斗统计响应
message UpdateBattleStatisticsResponse {
  BaseResponse base = 1;
  BattleStatistics updated_stats = 2;
}

// 战斗匹配请求
message BattleMatchmakingRequest {
  string player_id = 1;
  BattleType battle_type = 2;
  int32 skill_level = 3;
  repeated string preferred_opponents = 4;
  repeated string blocked_opponents = 5;
  map<string, string> preferences = 6;
}

// 战斗匹配响应
message BattleMatchmakingResponse {
  BaseResponse base = 1;
  string match_id = 2;
  repeated string matched_players = 3;
  int32 estimated_wait_time = 4;
  BattleInfo suggested_battle = 5;
}

// 取消战斗匹配请求
message CancelBattleMatchmakingRequest {
  string player_id = 1;
  string match_id = 2;
}

// 取消战斗匹配响应
message CancelBattleMatchmakingResponse {
  BaseResponse base = 1;
}

// 战斗服务接口
service BattleService {
  // 创建战斗
  rpc CreateBattle(CreateBattleRequest) returns (CreateBattleResponse);
  
  // 获取战斗信息
  rpc GetBattle(GetBattleRequest) returns (GetBattleResponse);
  
  // 加入战斗
  rpc JoinBattle(JoinBattleRequest) returns (JoinBattleResponse);
  
  // 离开战斗
  rpc LeaveBattle(LeaveBattleRequest) returns (LeaveBattleResponse);
  
  // 开始战�?
  rpc StartBattle(StartBattleRequest) returns (StartBattleResponse);
  
  // 结束战斗
  rpc EndBattle(EndBattleRequest) returns (EndBattleResponse);
  
  // 执行战斗行动
  rpc ExecuteBattleAction(ExecuteBattleActionRequest) returns (ExecuteBattleActionResponse);
  
  // 获取战斗行动历史
  rpc GetBattleActions(GetBattleActionsRequest) returns (GetBattleActionsResponse);
  
  // 查询战斗
  rpc QueryBattles(QueryBattlesRequest) returns (QueryBattlesResponse);
  
  // 计算战斗奖励
  rpc CalculateBattleRewards(CalculateBattleRewardsRequest) returns (CalculateBattleRewardsResponse);
  
  // 发放战斗奖励
  rpc DistributeBattleRewards(DistributeBattleRewardsRequest) returns (DistributeBattleRewardsResponse);
  
  // 获取战斗统计
  rpc GetBattleStatistics(GetBattleStatisticsRequest) returns (GetBattleStatisticsResponse);
  
  // 更新战斗统计
  rpc UpdateBattleStatistics(UpdateBattleStatisticsRequest) returns (UpdateBattleStatisticsResponse);
  
  // 战斗匹配
  rpc BattleMatchmaking(BattleMatchmakingRequest) returns (BattleMatchmakingResponse);
  
  // 取消战斗匹配
  rpc CancelBattleMatchmaking(CancelBattleMatchmakingRequest) returns (CancelBattleMatchmakingResponse);
}
