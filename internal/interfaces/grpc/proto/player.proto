syntax = "proto3";

package greatestworks.grpc;

import "common.proto";

option go_package = "greatestworks/internal/interfaces/grpc/proto";

// Player information
message PlayerInfo {
  string id = 1;
  string name = 2;
  string email = 3;
  int32 level = 4;
  int64 exp = 5;
  string status = 6; // online, offline, busy, away
  Position position = 7;
  Stats stats = 8;
  int64 created_at = 9;
  int64 updated_at = 10;
  int64 last_login = 11;
  map<string, string> metadata = 12;
}

// Create player request
message CreatePlayerRequest {
  string name = 1;
  string email = 2;
  string password = 3;
  map<string, string> initial_data = 4;
}

// Create player response
message CreatePlayerResponse {
  BaseResponse base = 1;
  PlayerInfo player = 2;
}

// Get player request
message GetPlayerRequest {
  string player_id = 1;
  bool include_stats = 2;
  bool include_metadata = 3;
}

// Get player response
message GetPlayerResponse {
  BaseResponse base = 1;
  PlayerInfo player = 2;
  bool found = 3;
}

// Update player request
message UpdatePlayerRequest {
  string player_id = 1;
  optional string name = 2;
  optional string email = 3;
  optional int32 level = 4;
  optional int64 exp = 5;
  optional string status = 6;
  optional Position position = 7;
  optional Stats stats = 8;
  map<string, string> metadata = 9;
}

// Update player response
message UpdatePlayerResponse {
  BaseResponse base = 1;
  PlayerInfo player = 2;
}

// Delete player request
message DeletePlayerRequest {
  string player_id = 1;
  bool soft_delete = 2;
  string reason = 3;
}

// Delete player response
message DeletePlayerResponse {
  BaseResponse base = 1;
}

// Query players request
message QueryPlayersRequest {
  QueryCondition condition = 1;
  bool include_stats = 2;
  bool include_metadata = 3;
}

// Query players response
message QueryPlayersResponse {
  BaseResponse base = 1;
  repeated PlayerInfo players = 2;
  PaginationInfo pagination = 3;
}

// Player login request
message PlayerLoginRequest {
  string player_id = 1;
  string session_id = 2;
  string client_ip = 3;
  string user_agent = 4;
  map<string, string> login_data = 5;
}

// Player login response
message PlayerLoginResponse {
  BaseResponse base = 1;
  PlayerInfo player = 2;
  string session_token = 3;
  int64 expires_at = 4;
}

// Player logout request
message PlayerLogoutRequest {
  string player_id = 1;
  string session_id = 2;
  string reason = 3;
}

// Player logout response
message PlayerLogoutResponse {
  BaseResponse base = 1;
}

// Player move request
message PlayerMoveRequest {
  string player_id = 1;
  Position from_position = 2;
  Position to_position = 3;
  float speed = 4;
  int64 timestamp = 5;
}

// Player move response
message PlayerMoveResponse {
  BaseResponse base = 1;
  Position old_position = 2;
  Position new_position = 3;
  bool success = 4;
  string reason = 5;
}

// Update player status request
message UpdatePlayerStatusRequest {
  string player_id = 1;
  string status = 2;
  map<string, string> status_data = 3;
}

// Update player status response
message UpdatePlayerStatusResponse {
  BaseResponse base = 1;
  string old_status = 2;
  string new_status = 3;
}

// Update player stats request
message UpdatePlayerStatsRequest {
  string player_id = 1;
  Stats stats = 2;
  bool is_delta = 3; // true for delta update, false for absolute update
}

// Update player stats response
message UpdatePlayerStatsResponse {
  BaseResponse base = 1;
  Stats old_stats = 2;
  Stats new_stats = 3;
}

// Get online players request
message GetOnlinePlayersRequest {
  PaginationRequest pagination = 1;
  string status_filter = 2; // Status filter
  bool include_stats = 3;
}

// Get online players response
message GetOnlinePlayersResponse {
  BaseResponse base = 1;
  repeated PlayerInfo players = 2;
  PaginationInfo pagination = 3;
  int32 total_online = 4;
}

// Player experience update request
message UpdatePlayerExpRequest {
  string player_id = 1;
  int64 exp_delta = 2;
  string source = 3; // Experience source: battle, quest, daily, etc
  map<string, string> metadata = 4;
}

// Player experience update response
message UpdatePlayerExpResponse {
  BaseResponse base = 1;
  int64 old_exp = 2;
  int64 new_exp = 3;
  int32 old_level = 4;
  int32 new_level = 5;
  bool level_up = 6;
}

// Player level update request
message UpdatePlayerLevelRequest {
  string player_id = 1;
  int32 new_level = 2;
  bool auto_adjust_exp = 3;
  string reason = 4;
}

// Player level update response
message UpdatePlayerLevelResponse {
  BaseResponse base = 1;
  int32 old_level = 2;
  int32 new_level = 3;
  int64 old_exp = 4;
  int64 new_exp = 5;
}

// Batch get players request
message BatchGetPlayersRequest {
  repeated string player_ids = 1;
  bool include_stats = 2;
  bool include_metadata = 3;
}

// Batch get players response
message BatchGetPlayersResponse {
  BaseResponse base = 1;
  repeated PlayerInfo players = 2;
  repeated string not_found_ids = 3;
}

// Search players request
message SearchPlayersRequest {
  string keyword = 1;
  repeated string search_fields = 2; // name, email, etc
  QueryCondition condition = 3;
}

// Search players response
message SearchPlayersResponse {
  BaseResponse base = 1;
  repeated PlayerInfo players = 2;
  PaginationInfo pagination = 3;
  string search_keyword = 4;
}

// Áé©ÂÆ∂ÊéíË°åÊ¶úËØ∑Ôø?
message GetPlayerRankingRequest {
  string ranking_type = 1; // level, exp, battle_score, etcÔø?
  PaginationRequest pagination = 2;
  TimeRange time_range = 3;
}

// Áé©ÂÆ∂ÊéíË°åÊ¶úÊù°Ôø?
message PlayerRankingEntry {
  int32 rank = 1;
  PlayerInfo player = 2;
  int64 score = 3;
  map<string, string> ranking_data = 4;
}

// Áé©ÂÆ∂ÊéíË°åÊ¶úÂìçÔø?
message GetPlayerRankingResponse {
  BaseResponse base = 1;
  repeated PlayerRankingEntry entries = 2;
  PaginationInfo pagination = 3;
  string ranking_type = 4;
  int64 last_updated = 5;
}

// Player activity record
message PlayerActivityRecord {
  string id = 1;
  string player_id = 2;
  string activity_type = 3; // login, logout, move, battle, etcÔø?
  string description = 4;
  map<string, string> data = 5;
  int64 timestamp = 6;
}

// Get player activity request
message GetPlayerActivityRequest {
  string player_id = 1;
  repeated string activity_types = 2;
  TimeRange time_range = 3;
  PaginationRequest pagination = 4;
}

// Get player activity response
message GetPlayerActivityResponse {
  BaseResponse base = 1;
  repeated PlayerActivityRecord activities = 2;
  PaginationInfo pagination = 3;
}

// Record player activity request
message RecordPlayerActivityRequest {
  string player_id = 1;
  string activity_type = 2;
  string description = 3;
  map<string, string> data = 4;
}

// Record player activity response
message RecordPlayerActivityResponse {
  BaseResponse base = 1;
  string activity_id = 2;
}

// Player service interface
service PlayerService {
  // Create player
  rpc CreatePlayer(CreatePlayerRequest) returns (CreatePlayerResponse);
  
  // Get player information
  rpc GetPlayer(GetPlayerRequest) returns (GetPlayerResponse);
  
  // Update player information
  rpc UpdatePlayer(UpdatePlayerRequest) returns (UpdatePlayerResponse);
  
  // Delete player
  rpc DeletePlayer(DeletePlayerRequest) returns (DeletePlayerResponse);
  
  // Query players
  rpc QueryPlayers(QueryPlayersRequest) returns (QueryPlayersResponse);
  
  // Player login
  rpc PlayerLogin(PlayerLoginRequest) returns (PlayerLoginResponse);
  
  // Player logout
  rpc PlayerLogout(PlayerLogoutRequest) returns (PlayerLogoutResponse);
  
  // Player move
  rpc PlayerMove(PlayerMoveRequest) returns (PlayerMoveResponse);
  
  // Êõ¥Êñ∞Áé©ÂÆ∂Áä∂ÔøΩ?
  rpc UpdatePlayerStatus(UpdatePlayerStatusRequest) returns (UpdatePlayerStatusResponse);
  
  // Update player stats
  rpc UpdatePlayerStats(UpdatePlayerStatsRequest) returns (UpdatePlayerStatsResponse);
  
  // Get online players
  rpc GetOnlinePlayers(GetOnlinePlayersRequest) returns (GetOnlinePlayersResponse);
  
  // Update player experience
  rpc UpdatePlayerExp(UpdatePlayerExpRequest) returns (UpdatePlayerExpResponse);
  
  // Update player level
  rpc UpdatePlayerLevel(UpdatePlayerLevelRequest) returns (UpdatePlayerLevelResponse);
  
  // Batch get players
  rpc BatchGetPlayers(BatchGetPlayersRequest) returns (BatchGetPlayersResponse);
  
  // Search players
  rpc SearchPlayers(SearchPlayersRequest) returns (SearchPlayersResponse);
  
  // Ëé∑ÂèñÁé©ÂÆ∂ÊéíË°åÔø?
  rpc GetPlayerRanking(GetPlayerRankingRequest) returns (GetPlayerRankingResponse);
  
  // Get player activity
  rpc GetPlayerActivity(GetPlayerActivityRequest) returns (GetPlayerActivityResponse);
  
  // Record player activity
  rpc RecordPlayerActivity(RecordPlayerActivityRequest) returns (RecordPlayerActivityResponse);
}
